)
}
for (i in 1:length(vennCols)){
colMax <- ceiling(max(as.numeric(df.data[,vennCols[i]]), na.rm = TRUE))
colMin <- floor(min(as.numeric(df.data[,vennCols[i]]), na.rm = TRUE))
Vname <- vennCols[i]
Vname <- substr(Vname ,11,100)
Vname <- gsub("^_", "", Vname)
Vname <- gsub("_", " ", Vname)
if (is.numeric(colMax) & is.numeric(colMin)){
settingsPhpVec <- c(
settingsPhpVec,
paste0("        '",vennCols[i],"' => array("),
paste0("            'name' => '",Vname,"',"),
paste0("            'slider_min' => ", colMin,","),
paste0("            'slider_max' => ", colMax,","),
paste0("            'default_low' => ", colMin,","),
paste0("            'default_high' => ", colMax,""),
"        )"
)
}
if (i < length(vennCols)){
settingsPhpVec[length(settingsPhpVec)] <- paste0(
settingsPhpVec[length(settingsPhpVec)], ","
)
}
}
settingsPhpVec <- c(
settingsPhpVec,
"    )",  ## Done with venn array
"    )," ## Done with venn array
)
## Done adding Venn section
## Adding scatterplot ##
scatterCols <- as.vector(NULL, mode = "character")
for (i in 1:length(plot.selection.strings)){
scatterCols <- c(
scatterCols,
names(df.data)[grep(plot.selection.strings[i], names(df.data))]
)
}
if (!is.null(pcaDbTable)){
settingsPhpVec <- c(
settingsPhpVec,
"    // Scatterplot Parameters",
paste0("'pca' => '", pcaDbTable, "',")
)
}
if (length(scatterCols) > 0){
if (is.null(defaultXcolName)){
defaultXcolName <- scatterCols[1]
}
if (is.null(defaultYcolName)){
defaultXcolName <- scatterCols[2]
}
settingsPhpVec <- c(
settingsPhpVec,
"    // Scatterplot Parameters",
"    'scatterplot' => array(",
paste0("        'default-x' => '",defaultXcolName,"',"),
paste0("        'default-y' => '",defaultYcolName,"',"),
"        'selection' => array("
)
for (i in 1:length(scatterCols)){
Sname <- scatterCols[i]
Sname <- substr(Sname ,11,100)
Sname <- gsub("^_", "", Sname)
Sname <- gsub("_", " ", Sname)
settingsPhpVec <- c(
settingsPhpVec,
paste0("            '",scatterCols[i],"' => array("),
paste0("                'name' => '",Sname,"'"),
"            )"
)
if (i < length(scatterCols)){
settingsPhpVec[length(settingsPhpVec)] <- paste0(
settingsPhpVec[length(settingsPhpVec)], ","
)
}
}
settingsPhpVec <- c(
settingsPhpVec,
"        )", # close scatterplot selection array
"    )", # close scatterplot  array
"//End scatterplot" # close scatterplot  array
)
}
## Done adding scatterplot ##
## End of file ##
settingsPhpVec <- c(
settingsPhpVec,
");"
)
###########################################################################
## Create settings.php file                                              ##
setwd(webSiteDir)
if (!dir.exists(project_id)){
dir.create(project_id)
}
if (substr(webSiteDir, nchar(webSiteDir), nchar(webSiteDir)) != "/"){
webSiteDir <- paste0(
webSiteDir,
"/"
)
}
FN <- paste0(
webSiteDir,
project_id,
"/settings.php"
)
sink(FN)
for (i in 1:length(settingsPhpVec)){
cat(settingsPhpVec[i]); cat("\n")
}
sink()
## Done creating settings.php file                                       ##
###########################################################################
}
## End: createSettingsFile()                                                 ##
###############################################################################
###############################################################################
## (1) Datatable.to.website.ptm                                              ##
###############################################################################
# df data input
# Requires a logFC mention in the contrast_X_
#' @export
datatable.to.website.ptm <- function (
df.data,
gene.id.column = "ENSMUSG",
heatmap.genes = "", #Relevant genes has to be the same id class as in gene.id.column
n.cluster.genes = 6000,
count.data = FALSE,
logFC.cut.off = 0, # Either 0 or 1. If 1, then df.data needs to contain
# a logFC_cut_off column that is either 0 (exclude row in heatmap)
# or 1 (include row in heatmap)
selector4heatmap.cols = "logFC",
heatmap.preprocessing = "lg2.row.avg", # possible: "lg2", "lg2.row.avg", "none"
hm.cut.off = 4,
n.hm.cluster = 10,
count.cut.off.filter = 1
) {
###########################################################################
## Prepare data table                                                    ##
# Remove all rows not featuring as an entry in the primary.gene.id.column
df.data <- df.data[!is.na(df.data[, gene.id.column]), ]
df.data                 <- unique(df.data)
df.data[is.na(df.data)] <- ""
# Enable filtering of low count rows
if (length(grep("^count_cut_off$", names(df.data))) == 0 ){
if (count.data){
df.data[["count_cut_off"]] <- 0
df.data[,"count_cut_off"]  <- rowSums(df.data[,grep("norm_counts", names(df.data))])
df.data[,"count_cut_off"]  <- df.data[,"count_cut_off"]/length(grep("norm_counts", names(df.data)))
} else {
df.data[["count_cut_off"]] <- 5
}
}
df.data <- df.data[df.data$count_cut_off > count.cut.off.filter,]
df.data[["row_id"]]     <- paste(
rep("R", nrow(df.data)),
1:nrow(df.data),
sep = ""
)
## Calculate coeficient of variation based on norm_counts column for each row
df.data["CoVar"] <- 0
## Ignore low-intesity rows ##
df.data[df.data$count_cut_off > 1,"CoVar"] <- apply(
df.data[df.data$count_cut_off > 1, grep("^norm_counts_", names(df.data))],
1,
function(x) sd(x)/mean(x)
)
df.data[is.na(df.data)] <- 0
df.data[df.data$CoVar == Inf, "CoVar"] <- max(df.data[df.data$CoVar < Inf ,"CoVar"])
# Order from highest to lowest CoVar
df.data <- df.data[order(df.data$CoVar, decreasing = TRUE),]
df.data[["CoVarOrder"]] <- 1:nrow(df.data)
# Select columns for heatmaps and plot display
df.lg2.row.avg.table <- df.data[, grep(selector4heatmap.cols, names(df.data))]
row.names(df.lg2.row.avg.table) <- df.data[, "row_id"]
## Remove column handle from heatmap column ##
if (length(grep("contrast_", names(df.lg2.row.avg.table))) > 0){
names(df.lg2.row.avg.table) <- gsub("contrast_", "", names(df.lg2.row.avg.table))
## Remove contrast number ##
names(df.lg2.row.avg.table)     <- substr(
names(df.lg2.row.avg.table),
2,
100
)
} else if (length(grep("norm_counts_", names(df.lg2.row.avg.table))) > 0){
names(df.lg2.row.avg.table) <- gsub(
"norm_counts_",
"",
names(df.lg2.row.avg.table)
)
}
## Take care of double digit contrast numbers ##
names(df.lg2.row.avg.table)  <- gsub(
"^_",
"",
names(df.lg2.row.avg.table)
)
names(df.lg2.row.avg.table)     <- paste(
"lg2_avg_",
names(df.lg2.row.avg.table),
sep = ""
)
# Ensure numericness
df.lg2.row.avg.table[, grep("lg2_avg", names(df.lg2.row.avg.table))] <- apply(
df.lg2.row.avg.table[, grep("lg2_avg", names(df.lg2.row.avg.table))],
2,
as.numeric
)
## End df.lg2.row.avg.table creation for all rows                        ##
###########################################################################
## Create heatmap parameters and default selections                      ##
# Data preprocessing accoring to selection #
if (heatmap.preprocessing == "lg2"){
for (i in 1:nrow(df.lg2.row.avg.table)) {
df.lg2.row.avg.table[i, ] <- log2(df.lg2.row.avg.table[i,])
}
} else if (heatmap.preprocessing == "lg2.row.avg"){
# Calculate row means
row_means <- rep(0, nrow(df.lg2.row.avg.table))
for (i in 1:nrow(df.lg2.row.avg.table)){
temp.row <- df.lg2.row.avg.table[i, grep("lg2_avg", names(df.lg2.row.avg.table))]
temp.row <- temp.row[temp.row != 0]
if (length(temp.row) > 0){
row_means[i] <- mean(temp.row)
}
}
## Retired 20160621 ## Start ##
#row_means <- apply(
#    df.lg2.row.avg.table[, grep("lg2_avg", names(df.lg2.row.avg.table))], 1, mean
#)
## Retired 20160621 ## End ##
# Avoid devison by 0
row_means[row_means == 0] <- 0.001
for (i in 1:nrow(df.lg2.row.avg.table)) {
df.lg2.row.avg.table[i, ] <- log2(df.lg2.row.avg.table[i,]/row_means[i])
}
}
# If 'none' or anything else is selected for heatmap processing, The values will be used as 'is' for
# the heatmap display
## Set all Infs to 0 ##
df.lg2.row.avg.table[df.lg2.row.avg.table == Inf ] <- 0
df.lg2.row.avg.table[df.lg2.row.avg.table == -Inf ] <- 0
# Limit top/bottom values of heatmap display
df.lg2.row.avg.table[df.lg2.row.avg.table > hm.cut.off] <- hm.cut.off
df.lg2.row.avg.table[df.lg2.row.avg.table < (-1) * hm.cut.off] <- (-1) * hm.cut.off
df.lg2.row.avg.table[, "row_id"] <- row.names(df.lg2.row.avg.table)
df.data = merge(df.data, df.lg2.row.avg.table, by.x <- "row_id", by.y = "row_id")
df.data = na.omit(df.data)
row.names(df.data) = make.names(df.data[, "row_id"])
## Make gene selection for heatmap                                       ##
# If the selection is provided in the heatmap.genes vector
# these genes are used
# Create logFC_cut_off column if not present in dataset
if (length(grep("logFC_cut_off", names(df.data))) == 0){
df.data[["logFC_cut_off"]] <- 0
}
if (sum(df.data$logFC_cut_off) > 0){
df.hm.sel <- df.data[df.data$logFC_cut_off == 1,]
} else {
df.hm.sel <- df.data
}
if (heatmap.genes[1] == "" | is.na(heatmap.genes[1])){
## Select gene subset for heatmap based on coefficient of variation
heatmap.genes <- as.vector(
unique(
df.hm.sel[,gene.id.column]
)
)
} else {
# Make sure all listed gene IDs are present in the dataset
heatmap.genes <- heatmap.genes[heatmap.genes %in% df.hm.sel[,gene.id.column]]
}
# Done selecting heatmap genes #
# Limiting number of genes for heatmap display accoring to specifications #
## Query logFC limitation ##
# Limit based on Coeficient of variation #
if (length(heatmap.genes) > n.cluster.genes){
dfSel <- df.hm.sel
#row.names(dfSel) <- NULL
dfSel <- unique(dfSel[,c("CoVar", "CoVarOrder", gene.id.column)])
dfSel <- dfSel[order(dfSel$CoVarOrder),]
heatmap.genes <- as.vector(dfSel[,gene.id.column])[1:n.cluster.genes]
}
# Create df.cluster #
if (sum(df.data$logFC_cut_off) > 0){
df.cluster <- df.data[
df.data[,gene.id.column] %in% heatmap.genes &
df.data$logFC_cut_off == 1,
grep("lg2_avg", names(df.data))
]
} else {
df.cluster <- df.data[
df.data[,gene.id.column] %in% heatmap.genes,
grep("lg2_avg", names(df.data))
]
}
## Done selecting genes for heatmap                                          ##
###############################################################################
###############################################################################
# Make heatmap function                                                       #
###############################################################################
## Function definition moved to package ##
## Flatening ##
df.cluster[df.cluster > hm.cut.off] = hm.cut.off
df.cluster[df.cluster < (-1) * hm.cut.off] = (-1) * hm.cut.off
m.cluster = data.matrix(df.cluster)
m.cluster[is.na(m.cluster)] = 0
colnames(m.cluster) <- gsub("lg2_avg_", "", colnames(m.cluster))
#m.cluster[m.cluster == 0] = 0.01
# Make col.sorted heatmap ##
hm.res = make.hm(
m.cluster,
filename = "",
k.number = n.hm.cluster,
n.colors = 20,
hclust.method = "ward.D2",
dist.method = "euclidean",
main = "",
Colv = FALSE
)
## Make col-clustered heatmap ##
hm.res = make.hm(
m.cluster,
filename = "",
k.number = n.hm.cluster,
n.colors = 20,
hclust.method = "ward.D2",
dist.method = "euclidean",
main = "",
Colv = TRUE
)
## Extract cluster order ##
df.clust.order <- data.frame(hm.res$sorted)
cluster.ordered.sample.vector <- names(df.clust.order)
df.clust.order[["cluster_order"]] <- 1:nrow(df.clust.order)
df.clust.order[, "row_id"] <- row.names(df.clust.order)
df.clust.order <- df.clust.order[, c("row_id", "cluster_order")]
## Extract sample order ##
df.sample.order <- hm.res$sorted
sampleColClustOrder <- names(data.frame(df.sample.order))
## Re-order lg2_avg and norm_counts accordingly ##
renameVec <- names(df.data)
# Remove lg2_avg_entries #
oldLog2AvgEntries <- names(df.data)[grep("lg2_avg", names(df.data))]
newLog2AvgEntries <- paste0("lg2_avg_", sampleColClustOrder)
if (sum(!(oldLog2AvgEntries %in% newLog2AvgEntries)) == 0){
renameVec <- renameVec[!(renameVec %in% newLog2AvgEntries)]
renameVec <- c(
renameVec,
newLog2AvgEntries
)
}
# Remove norm_counts #
oldNormCountsEntries <- names(df.data)[grep("norm_counts_", names(df.data))]
newNormCountsEntries <- paste0("norm_counts_", sampleColClustOrder)
if (sum(!(oldNormCountsEntries %in% newNormCountsEntries)) == 0){
renameVec <- renameVec[!(renameVec %in% newNormCountsEntries)]
renameVec <- c(
renameVec,
newNormCountsEntries
)
}
## Reorder columns in df.data ##
if (sum(!(names(df.data) %in% renameVec)) == 0){
df.data <- df.data[,renameVec]
}
## Add to main data table ##
remove <- as.vector(
na.omit(
match(
df.clust.order[, "row_id"],
df.data[, "row_id"]
)
)
)
id.vector = as.vector(df.data[-remove, "row_id"])
df.rest = data.frame(id.vector, rep(0, length(id.vector)))
names(df.rest) = names(df.clust.order)
df.clust.order = rbind(df.clust.order, df.rest)
df.data = merge(df.data, df.clust.order, by.x = "row_id",
by.y = "row_id")
df.data = df.data[!is.na(df.data[, gene.id.column]), ]
df.data = unique(df.data)
# Add cluster id
df.cluster.id <- data.frame(na.omit(hm.res$clusters))
df.cluster.id[["row_id"]] <- row.names(df.cluster.id)
names(df.cluster.id)<- c("cluster_id", "row_id")
df.cluster.id <- df.cluster.id[grep("R", df.cluster.id$row_id),]
# Adding all other ids
row_id <- df.data[!(df.data$row_id %in% df.cluster.id$row_id), "row_id"]
cluster_id <- rep(0, length(row_id))
df.add <- rbind(df.cluster.id, data.frame(cluster_id, row_id))
df.data <- merge(df.data, df.add, by.x = "row_id", by.y="row_id", all=TRUE)
df.data[is.na(df.data)] = ""
# # Add gene descripton
# if (!exists("df.anno")){
#     df.anno <- read.delim(
#         gene.id.table,
#         header = TRUE,
#         sep = "\t",
#         stringsAsFactors = FALSE
#     )
# }
#
# # Remove all entries from df.anno that are not present in df.data
# df.anno <- df.anno[df.anno[,gene.id.column] %in% df.data[,gene.id.column],]
# if (!add.uniprot.column){
#     df.anno$uniprot = NULL
#     df.anno <- unique(df.anno)
# }
#
# df.anno <- unique(df.anno)
#
# df.data <- merge(
#     df.data,
#     df.anno,
#     by.x = gene.id.column,
#     by.y = gene.id.column,
#     all=TRUE
# )
#
# df.data[is.na(df.data)] = ""
# df.data = unique(df.data)
#
# if (gene.id.column == "mgi_symbol" | gene.id.column == "ENSMUSG") {
#     ENSG <- "ENSMUSG"
# } else if (gene.id.column == "hgnc_symbol" | gene.id.column == "ENSG") {
#     ENSG <- "ENSG"
# }
#
# if (gene.id.column != "mgi_symbol" | gene.id.column != "hgnc_symbol"){
#     df.data$gene_description <- paste0(
#         df.data$gene_description,
#         " (",
#         df.data[,gene.id.column],
#         ")"
#     )
# }
###########################################################################
## Deal with PTM datasets                                                ##
if (length(grep("p_site_env", names(df.data))) > 0) {
#Trim if the sequence window is to big
length <- nchar(df.data$p_site_env)
center <- ((length -1)/2)
df.data$p_site_env <- ifelse(
(length > 15),
substr(df.data$p_site_env, center-6,center+8),
df.data$p_site_env
)
one = tolower(substr(df.data$p_site_env, 1, 7))
two = toupper(substr(df.data$p_site_env, 8, 8))
three = tolower(substr(df.data$p_site_env, 9, 16))
df.data$p_site_env = paste(one, two, three, sep = "")
################################################################################
#Add ppos columns to datatable
################################################################################
ppos.vec = c("ppos_minus_7","ppos_minus_6","ppos_minus_5","ppos_minus_4","ppos_minus_3","ppos_minus_2","ppos_minus_1","ppos",
"ppos_plus_1", "ppos_plus_2","ppos_plus_3","ppos_plus_4","ppos_plus_5","ppos_plus_6","ppos_plus_7")
#In this dataset not all sequences are associated with an p_site_env
#df.data[df.data$p_site_env == "", "p_site_env"] = substr(df.data[df.data$p_site_env == "", "sequence_window"], 9,23)
for (i in 1:length(ppos.vec)){
df.data[[ppos.vec[i]]] = sapply(
df.data$p_site_env,
function(x) substr(x, i,i))
}
# Done adding ppos columns
}
## Done dealing with PTM datasets                                        ##
###########################################################################
df.data[is.na(df.data)] = ""
df.data = unique(df.data)
df.data = df.data[!is.na(df.data[, gene.id.column]), ]
df.data[["row_names"]] = 1:nrow(df.data)
names(df.data) = gsub("[.]", "_", names(df.data))
names(df.data) = gsub(" ", "_", names(df.data))
return(df.data)
}
## End of function                                                           ##
###############################################################################
getwd()
devtools::document()
rm(list=ls())
getwd()
devtools::document()
devtools::use_vignette("introduction")
usethat::use_vignette("bioLOGIC Package")
install.packages("usethat")
usethat::use_vignette("bioLOGIC Package")
devtools::install_github("decusinlabore/bioLOGIC")
library(bioLOGIC)
lrtVec <- NULL
length(lrtVec )
library(fgsea)
data(examplePathways)
data(exampleRanks)
set.seed(42)
head(examplePathways)
head(exampleRanks)
class(exampleRanks)
data("examplePathways")
examplePathways
system.file(
"extdata", "mouse.reactome.gmt", package="fgsea")
rm(list=ls())
getwd()
devtools::document()
devtools::use_vignette("introduction")
usethat::use_vignette("bioLOGIC Package")
